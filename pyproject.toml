[build-system]
build-backend = "hatchling.build"

requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "qtico"
readme = "README.rst"
keywords = [ "icons", "pyqt" ]
license = "GPL-3.0"
authors = [ { name = "Philipp A.", email = "flying-sheep@web.de" } ]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: X11 Applications :: Qt",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Build Tools",
  "Typing :: Typed",
]
dynamic = [ "version" ]
dependencies = [ "qtpy" ]
optional-dependencies.test = [ "pytest" ]
urls.Homepage = "http://github.com/flying-sheep/qtico"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.hatch-test]
default-args = [  ]
features = [ "test" ]
extra-dependencies = [ "pyside6" ]

[tool.ruff]
format.indent-style = "tab"
format.quote-style = "single"
lint.select = [ "ALL" ]
lint.ignore = [
  "ANN101",  # self type doesn’t need to be annotated
  "C408",    # dict() calls are nice
  "COM812",  # trailing commas handled by formatter
  "D100",    # TODO: remove
  "D103",    # TODO
  "D203",    # prefer 0 to 1 blank line before class members
  "D206",    # indent handled by formatter
  "D213",    # prefer docstring summary on first line
  "FIX002",  # “TODO” comments
  "PLR0913", # having many (kw)args is fine
  "Q",       # handled by formatter
  "S101",    # asserts are fine
  "S603",    # subprocess.run(shell=False) is safe
  "S607",    # PATH is safe
  "W191",    # indent handled by formatter
]
lint.per-file-ignores."tests/**" = [ "ARG001", "INP001" ]
lint.allowed-confusables = [ "×", "–", "’" ]
lint.flake8-type-checking.exempt-modules = [  ]
lint.flake8-type-checking.strict = true
lint.isort.known-first-party = [ "qtico" ]
lint.isort.lines-after-imports = 2
lint.isort.required-imports = [ "from __future__ import annotations" ]

[tool.coverage.run]
source_pkgs = [ 'qtico' ]
[tool.coverage.paths]
scanpydoc = [ 'src/qtico' ]
[tool.coverage.report]
exclude_lines = [
  'no cov',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
]

[tool.coverage_rich]
fail-under = 0 # for now
